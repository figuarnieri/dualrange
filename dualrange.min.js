class DualRange{constructor(a,e){document.querySelectorAll(a).forEach(a=>{a.classList.add("dualrange__input-max"),a.setAttribute("value",a.max||100),a.setAttribute("step",a.step||.1),a.setAttribute("data-dualrange-max",""),a.outerHTML=`<div class="dualrange" data-dualrange-valmin="${a.min}" data-dualrange-valmax="${a.max}"><input data-dualrange-min step="0.1" type="range" min="${a.min}" max="${a.max}" value="${a.min}" class="dualrange__input-min">${a.outerHTML}<div class="dualrange__min" style="left: 0%; transform: translate(0%, -50%);"></div><div class="dualrange__max" style="left: 100%; transform: translate(-100%, -50%);"></div><div class="dualrange__range"></div></div>`}),this.init(a),this.fn=e}init(a){document.querySelectorAll(".dualrange input").forEach(a=>{this.range(a)})}range(a){const e=a.parentNode,t=e.children;a.addEventListener("input",e=>{const n=100/(a.max-a.min)*(a.value-a.min),l=parseFloat(t[0].value),r=parseFloat(t[1].value),i=new Event("input");if(l>r)return t[0].value=l-.1,t[1].value=r+.1,t[0].dispatchEvent(i),t[1].dispatchEvent(i),!1;t[a.hasAttribute("data-dualrange-max")?3:2].style.left=`${n}%`,t[a.hasAttribute("data-dualrange-max")?3:2].style.transform=`translate(-${n}%, -50%)`,this.fn&&(clearTimeout(window.dualRangeFallback),window.dualRangeFallback=setTimeout(()=>{this.fallback(a,this.fn)},100))}),e.addEventListener("mousemove",a=>{const t=a.offsetX,n=e.clientWidth,l=parseFloat(e.querySelector(".dualrange__min").style.left),r=parseFloat(e.querySelector(".dualrange__max").style.left),i=parseInt(100*t/n)-l<Math.abs(100*t/n-r);e.querySelector(i?".dualrange__input-min":".dualrange__input-max").classList.add("dualrange__zindex"),e.querySelector(i?".dualrange__input-max":".dualrange__input-min").classList.remove("dualrange__zindex")})}fallback(a,e){e({min:parseFloat(a.parentNode.children[0].value),max:parseFloat(a.parentNode.children[1].value)})}}